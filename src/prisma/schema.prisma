// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id                 Int       @id @default(autoincrement())
  dateTime           DateTime
  status             Status    @default(AVAILABLE)
  bookedAt           DateTime?
  rescheduledAt      DateTime?
  isRegisteredClient Boolean   @default(true)
  clientId           String?
  clientName         String?
  clientEmail        String?
  clientPhone        String?
  styleId            Int?
  styleName          String?   @db.VarChar(255)
  serviceId          Int?
  serviceNameEn      String?   @db.VarChar(255)
  serviceNameFi      String?   @db.VarChar(255)
  servicePrice       Float?
  adminNote          String?   @db.VarChar(500)

  client  User?    @relation(fields: [clientId], references: [id])
  style   Style?   @relation(fields: [styleId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])
}

enum Status {
  AVAILABLE
  BOOKED
  UNAVAILABLE
  PASSED
}

model Style {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(255)
  description_en String
  description_fi String
  imageUrl       String
  services       Service[]
  appointments   Appointment[]
}

model Service {
  id             Int           @id @default(autoincrement())
  name_en        String        @db.VarChar(255)
  name_fi        String        @db.VarChar(255)
  price          Float
  description_en String
  description_fi String
  styleId        Int
  appointments   Appointment[]

  style Style? @relation(fields: [styleId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  hashedPassword String
  firstName      String
  lastName       String
  phone          String
  isAdmin        Boolean       @default(false)
  appointments   Appointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
